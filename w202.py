  
# hometask week 2. Decorator to JSON. 23.12.2017
# Чтобы передавать данные между функциями, модулями или разными системами 
# используются форматы данных. Одним из самых популярных форматов является JSON. 
# Напишите декоратор to_json, который можно применить к различным функциям, 
# чтобы преобразовывать их возвращаемое значение в JSON-формат. 
# Не забудьте про сохранение корректного имени декорируемой функции.
# 
# Несмотря на простоту задачи, похожий декоратор так или иначе встречается 
# в каждом современном веб-приложении на Python. Задание помогло нам разобраться 
# с тем, как работают обычные декораторы, и обратить внимание на несколько моментов.
# Во-первых, использование декоратора wraps поможет вам избежать проблем с отладкой
# и логированием, 
# во-вторых, декораторы практически всегда пишутся так, чтобы их можно было 
# применить к любой функции, то есть в определении новой функции используются
# *args и **kwargs.
#

import json
import functools


def to_json(func):

	@functools.wraps(func) #для сохранения корректного имени декорируемой функции
	def wrapped(*arg, **kwargs):
		result = func(*arg, **kwargs)
		return json.JSONEncoder().encode(result)
	return wrapped