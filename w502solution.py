#week5
#Task 1 Client for work with metrics

"""Реализация клиента.
Необходимо реализовать класс Client, в котором будет инкапсулировано 
соединение с сервером, клиентский сокет и методы для получения (get) 
и отправки (put) метрик на сервер. 

# В конструктор класса Client должна передаваться адресная пара хост 
# и порт, а также необязательный аргумент timeout (имеющий значение по 
#умолчанию - None). Соединение с сервером устанавливается при создании 
#экземпляра класса Client и не должно разрываться между запросами. 

Итак, в качестве решения вам необходимо предоставить модуль с реализованным 
в нем классом Client, пользовательским исключением ClientError. 

В классе Client должны быть доступны методы get и put с описанной выше 
сигнатурой. При вызове методов get и put клиент должен 
- посылать сообщения в TCP-соединение с сервером (в соответствии с 
    описанным текстовым протоколом), 
- получать ответ от сервера и возвращать словарь с данными

Примечание.
Не смотря на то, что на этой неделе вы изучали асинхронность, 
клиент должен быть синхронным
"""
import socket

class Client():
    #todo timeout должен быть необязательный
    def __init__(self, address, port, timeout):
        """
        Example: client = Client("127.0.0.1", 8888, timeout=15)
        """
        self.address = address
        self.port = port
        self.sock = socket.create_connection((address, port))

    def get(self, request_data):
        """
        Метод get принимает в качестве параметра имя метрики, значения 
        которой мы хотим получить. В качестве имени метрики можно использовать 
        символ «*», о котором мы упоминали в описании протокола.

        Метод get возвращает словарь с метриками (смотрите пример ниже) в случае 
        успешного получения ответа от сервера и выбрасывает исключение 
        ClientError в случае не успешного.

        Клиент получает данные от сервера в текстовом виде, метод get 
        должен обработать строку ответа и вернуть словарь с полученными ключами 
        с сервера. Значением ключей в словаре является список кортежей:
        [(timestamp1, metric_value1), (timestamp2, metric_value2), …]

        Значение timestamp и metric_value должны быть преобразованы соответственно 
        к типам int и float. 
        Список должен быть отсортирован по значению timestamp (по возрастанию).

        Пример возвращаемого значения при успешном вызове client.get("palm.cpu"):

        {
          'palm.cpu': [
            (1150864247, 0.5),
            (1150864248, 0.5)
          ]
        }

        Если в параметре запроса переданы не валидные данные (например: 
        - нарушен формат запроса, 
        - ошибочная команда или 
        - значения value и timestamp не могут быть приведены к необходимому типу) 
        сервер отправляет строку со статусом ответа «error» и данными 
        ответа «wrong command»:
        error\nwrong command\n\n
        """
        
        #TODO: проверить формат запроса на правильность, а именно наличие
        # символа окончания строки \n в конце реквеста без пробела
        # print(client.get("*"))
        # pring(client.get("palm.cpu"))

        #TODO: Проверить тело запроса, что оно не состоить из одного символа
        # переноса строки или просто какой-то палки, процента и всех таких

        
        self.sock.sendall(request_data.encode('utf8'))
        
        while True:
            try:
                server_response = self.sock.recv(4096)
                if not server_response:
                    break
            except socket.error as e:
                print ('focking error')
            return server_response.decode('utf-8')
    
    def put(self, metric_name, value, timestamp):
        """
        Метод put принимает в качестве параметров: название метрики, 
        численное значение и необязательный именованный параметр timestamp. 
        Если пользователь вызвал метод put без аргумента timestamp, 
        то клиент автоматически должен подставить значение временной отметки, 
        полученное с помощью вызова int(time.time()).

        Метод put не возвращает ничего в случае успешной отправки и выбрасывает 
        пользовательское исключение ClientError в случае не успешной.
        """
        pass